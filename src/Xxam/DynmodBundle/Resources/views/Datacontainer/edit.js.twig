{
    tabtitle: '{% if entity.id %}{% trans with {'%name%': entity.name, '%id%': entity.id} %}Edit %name% (%id%){% endtrans %}{% else %}{% trans %}Create new Datacontainer{% endtrans %}{% endif %}',
    iconCls: 'x-fa fa-cube',
    getitems: function(){
    if (typeof(DatacontainerModel)=='undefined'){
        Ext.define('DatacontainerModel',{
            extend: 'Ext.data.Model',
            fields: {{modelfields|jscode(false)}},
            idProperty: 'id',
            proxy: {
                type: 'rest',
                url : '{{path('post_datacontainer')}}',
                writer: {
                    type: "json",
                    writeAllFields: true
                }
            }
        });
    }

    var dynmodsdata={{ dynmods|entitiesasextdata('name') }}


    var dynmodsStore = Ext.create('Ext.data.Store', {
        fields: ['id', 'value'],
        data : dynmodsdata
    });


    return {
        xtype: 'form',
        defaultType: 'textfield',
        scrollable: true,
        bodyPadding: 5,
        layout: 'anchor',
        defaults: {
            labelWidth: 120,
            anchor: '100%'
        },
        items: [{
            xtype: 'hiddenfield',
            name: 'id',
            value: '{{entity.id}}'
        },{
            xtype: 'combo',
            fieldLabel: '{%trans%}Dynmod{%endtrans%}',
            name: 'dynmod',
            store: dynmodsStore,
            queryMode: 'local',
            displayField: 'value',
            valueField: 'id',
            itemId: 'fieldDynmod',
            value: '{{ entity.getDynmod() ? entity.getDynmod().getId() : '' }}',
            listeners: {
                'select': function(){


                }
            }
        },{
            fieldLabel: '{%trans%}Name{%endtrans%}',
            name: 'name',
            value: '{{entity.name}}'
        },{
            fieldLabel: '{%trans%}Is default{%endtrans%}',
            name: 'defaultcontainer',
            xtype: 'checkbox',
            checked :  {{ entity.defaultcontainer ? 'true' : 'false'  }},
            value: '{{entity.defaultcontainer }}'
        }],
        dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: [{% include "XxamCoreBundle:snippets:footerversionlog.js.twig" %}
                { xtype: 'component', flex: 1 },
                {
                    xtype: 'button',
                    text: '{%trans%}Save{%endtrans%}',
                    handler: function() {
                        // The getForm() method returns the Ext.form.Basic instance:
                        var form = this.up('form').getForm();
                        fff=this.up('form');
                        if (form.isValid()) {
                            var newdatacontainer=Ext.create('DatacontainerModel',form.getValues());
                            // Submit the Ajax request and handle the response
                            newdatacontainer.save({
                                scope: this.up('form'),
                                success: function(datacontainer) {
                                    this.up('panel').close();
                                    if (typeof Ext.getCmp('datacontainerlist') !='undefined'){
                                        Ext.getCmp('datacontainerlist').getStore().load({
                                            callback: function(records, operation, success) {
                                            }
                                        });
                                    }
                                },
                                failure: function(datacontainer, operation) {
                                    var error=Ext.JSON.decode(operation.error.response.responseText);
                                    if (error){
                                        if(error.errors && error.errors.form && error.errors.form.children){
                                            var errors=[];
                                            Ext.Object.each(error.errors.form.children,function(key,value){
                                                errors.push({field:key,message:value.errors});
                                            });
                                            this.getForm().markInvalid(errors);
                                        }
                                    }
                                }
                            });
                        }
                    }
                }
            ]
        }]

    }
}
}