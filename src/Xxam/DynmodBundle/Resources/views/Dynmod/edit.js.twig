{
    tabtitle: '{% if entity.id %}{% trans with {'%code%': entity.code, '%id%': entity.id} %}Edit %code% (%id%){% endtrans %}{% else %}{% trans %}Create new Dynamic Module{% endtrans %}{% endif %}',
    iconCls: 'x-fa fa-cube',
    getitems: function(){
    if (typeof(DynmodModel)=='undefined'){
        Ext.define('DynmodModel',{
            extend: 'Ext.data.Model',
            fields: {{modelfields|jscode(false)}},
            idProperty: 'id',
            proxy: {
                type: 'rest',
                url : '{{path('post_dynmod')}}',
                writer: {
                    type: "json",
                    writeAllFields: true
                }
            }
        });
    }


    var generateAddtionalruleinput=function(value,disabled){
        return {
            xtype: 'fieldcontainer',
            layout:'hbox',
            shrinkWrap: 1,
            hideLabel: true,
            items: [
                {
                    xtype: 'textfield',
                    flex: 1,
                    fieldLabel: 'ROLE_DYNMOD_[CODE]_',
                    labelAlign: 'right',
                    labelSeparator: ' ',
                    labelWidth: 'auto',
                    value: value,
                    regex: new RegExp("^[A-Z0-9_]+$"),
                    regexText: 'Only A-Z, digits and "_" allowed'
                },
                {
                    xtype: 'button',
                    flex: 0,
                    width: 50,
                    iconCls: 'x-fa fa-minus',
                    margin: '0 0 0 5',
                    scale: "small",
                    tooltip: '{%trans%}Remove{%endtrans%}',
                    disabled: disabled,
                    handler: function(){
                        ttt=this;
                        var fieldcontainer=this.up('fieldcontainer');
                        var fieldcontainerparent=fieldcontainer.up();
                        fieldcontainerparent.remove(fieldcontainer);
                        if (fieldcontainerparent.items.length==1){
                            fieldcontainerparent.down('button').setDisabled(true);
                        }
                    }
                }
            ]
        }
    }
    var additionalrules = {{ entity.additionalroles ? entity.additionalroles|jsonwithfunctions : '[]' }};
    var additionalrulesimputs=[];
    if(additionalrules.length==0) additionalrules.push('');
    Ext.Array.each(additionalrules,function(additionalrule){
        additionalrulesimputs.push(generateAddtionalruleinput(additionalrule,additionalrules.length==1));
    });

    return {
        xtype: 'form',
        defaultType: 'textfield',
        scrollable: true,
        bodyPadding: 5,
        layout: 'anchor',
        defaults: {
            labelWidth: 120,
            anchor: '100%'
        },
        items: [{
            xtype: 'hiddenfield',
            name: 'id',
            value: '{{entity.id}}'
        },{
            fieldLabel: '{%trans%}Code{%endtrans%}',
            name: 'code',
            value: '{{entity.code}}',
            allowBlank: false,
            minLength: 4,
            maxLength: 10,
            regex: new RegExp("^[a-z0-9_]+$"),
            regexText: 'Only a-z, digits and "_" allowed'
        },{
            fieldLabel: '{%trans%}Name{%endtrans%}',
            name: 'name',
            value: '{{entity.name}}'
        },{
            fieldLabel: '{%trans%}Description{%endtrans%}',
            name: 'description',
            value: '{{entity.description}}'
        },{
            fieldLabel: '{%trans%}Help{%endtrans%}',
            name: 'help',
            value: '{{entity.help}}'
        },{
            fieldLabel: '{%trans%}IconCls{%endtrans%}',
            name: 'iconcls',
            value: '{{entity.iconcls}}'
        },{
            fieldLabel: '{%trans%}Active{%endtrans%}',
            name: 'active',
            xtype: 'checkbox',
            checked:  {{ entity.active ? 'true' : 'false' }},
            value: '{{entity.active}}'
        },{
            xtype: 'hiddenfield',
            name: 'additionalroles',
            value: '{{entity.additionalroles|json_encode}}'
        },{
            xtype: 'fieldcontainer',
            fieldLabel: '{%trans%}Additional Roles{%endtrans%}',
            layout: 'vbox',
            anchor: '100%',
            items: [
                {
                    xtype: 'component',
                    html: '{%trans%}Help text for additional roles{%endtrans%}'
                },
                {
                    xtype: 'fieldcontainer',
                    layout: 'vbox',
                    shrinkWrap: 1,
                    hideLabel: true,
                    padding:5,
                    anchor: '100%',
                    flex: 1,
                    items: additionalrulesimputs
                },
                {
                    xtype: 'button',
                    iconCls: 'x-fa fa-plus',
                    text: '{%trans%}Add{%endtrans%}',
                    handler: function(){
                        var fieldsetcontainer=this.up('fieldcontainer').down('fieldcontainer');
                        fieldsetcontainer.add(generateAddtionalruleinput('',false));
                        fieldsetcontainer.down('button').setDisabled(false);
                    }
                }
            ]
        }],
        dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: [{% include "XxamCoreBundle:snippets:footerversionlog.js.twig" %}
                { xtype: 'component', flex: 1 },
                {
                    xtype: 'button',
                    text: '{%trans%}Save{%endtrans%}',
                    handler: function() {
                        // The getForm() method returns the Ext.form.Basic instance:
                        var form = this.up('form').getForm();
                        if (form.isValid()) {
                            var newdynmod=Ext.create('DynmodModel',form.getValues());
                            var additionalroles=[];
                            Ext.Array.each(this.up('form').down('fieldcontainer').down('fieldcontainer').items.items,function(item){
                                if (item.down('textfield').getValue()!='') additionalroles.push(item.down('textfield').getValue());
                            });
                            newdynmod.data.additionalroles=additionalroles;
                            ndm=newdynmod;


                            // Submit the Ajax request and handle the response
                            newdynmod.save({
                                scope: this.up('form'),
                                success: function(dynmod) {
                                    ttt=this;
                                    this.up('panel').close();
                                    if (typeof Ext.getCmp('dynmodlist') !='undefined'){
                                        Ext.getCmp('dynmodlist').getStore().load({
                                            callback: function(records, operation, success) {
                                            }
                                        });
                                    }
                                },
                                failure: function(dynmod, operation) {
                                    var error=Ext.JSON.decode(operation.error.response.responseText);
                                    if (error){
                                        if(error.errors && error.errors.form && error.errors.form.children){
                                            var errors=[];
                                            Ext.Object.each(error.errors.form.children,function(key,value){
                                                errors.push({field:key,message:value.errors});
                                            });
                                            this.getForm().markInvalid(errors);
                                            console.log(errors);
                                        }
                                    }
                                }
                            });
                        }
                    }
                }
            ]
        }]

    }
}
}