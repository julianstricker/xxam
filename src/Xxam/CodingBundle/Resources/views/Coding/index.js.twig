{% set iconsize = '16x16' %}
{% set buttonsize = 'medium' %}
{% if buttonsize == 'large' %}
    {% set iconsize = '32x32' %}
{% endif %}
{
    tabtitle: 'Coding',
    tabicon: '/bundles/xxamcoding/icons/16x16/coding.png',
    getitems: function (){
        Xxam.appendHead({
            js: ['/bundles/xxamcoding/ace/src-min-noconflict/ace.js'],
            css: ['/bundles/xxamcoding/css/layout.css']
        });  
        
        var extensionshighlighters={
            '.js':'javascript',
            '.css':'css',
            '.php':'php',
            '.java':'java',
            '.cpp':'cpp',
            '.txt':'txt'
        }
        
        waitforace=function(){
            if(typeof ace == 'undefined'){
                window.setTimeout(waitforace,100);
            }else{
                editor_{{id}} = ace.edit("aceeditor_{{id}}-body");
                editor_{{id}}.setTheme("ace/theme/monokai");
                editor_{{id}}.broadcastchanges=true;
                Ext.Object.each(extensionshighlighters,function(key,value){
                    if('{{path}}'.substr(-key.length)==key){
                        editor_{{id}}.getSession().setMode("ace/mode/"+value);
                    }
                });
                var Range = ace.require('ace/range').Range
                Ext.Ajax.request({
                    url: '{{path('filemanager_readfile')}}',
                    method: 'GET',
                    params: {
                        path: '{{path}}',
                    },
                    success: function(response, options) {
                        var editor=editor_{{id}};
                        editor.setValue(response.responseText);
                        xxamws.subscribe('com.xxam.coding.{{id}}',editor)

                        editor.getSession().selection.on('changeCursor', function(e,target) {
                            console.log('onChangeCursor',target.getCursor());
                            xxamws.publish('com.xxam.coding.{{id}}', {'changeCursor':target.getCursor()},[]);
                        });
                        editor.getSession().selection.on('changeSelection', function(e,target) {
                            console.log('onChangeSelection',target.getRange());
                            xxamws.publish('com.xxam.coding.{{id}}', {'changeSelection':{'start':target.getRange().start,'end':target.getRange().end }},[]);
                        });
                        editor.getSession().on('change',function(e){
                            if (editor.broadcastchanges==true) {
                                console.log('onChange', e);
                                xxamws.publish('com.xxam.coding.{{ id }}', {'change': e}, []);
                            }
                        });

                        //Selections:
                        editor.selectionsmarker={};

                        //Cursors:
                        editor.cursormarker = {}
                        editor.cursormarker.cursors = {}
                        editor.cursormarker.update = function(html, markerLayer, session, config) {
                            var start = config.firstRow, end = config.lastRow;
                            var cursors = this.cursors
                            var cursorcounter=0;
                            Ext.Object.each(cursors,function(id,pos){
                                cursorcounter++;

                                if (pos.row < start) {
                                    //do nothing
                                } else if (pos.row > end) {
                                    return false;
                                } else {
                                    var username = xxamws.getUsernameForId(id);
                                    if (username) {

                                        // compute cursor position on screen
                                        // this code is based on ace/layer/marker.js
                                        var screenPos = session.documentToScreenPosition(pos)

                                        var height = config.lineHeight;
                                        var width = config.characterWidth;
                                        var top = markerLayer.$getTop(screenPos.row, config);
                                        var left = markerLayer.$padding + screenPos.column * width;
                                        // can add any html here
                                        html.push(
                                                '<div class="xxam_coding_cursor n'+cursorcounter+'" style="',
                                                "height:", height, "px;",
                                                "top:", top, "px;",
                                                "left:", left, "px; width:", width, 'px"><div class="xxam_coding_cursor_bubble n'+cursorcounter+'">' + username + '</div></div>'
                                        );
                                    }
                                }
                            });
                        }
                        editor.cursormarker.redraw = function() {
                            this.session._signal("changeFrontMarker");
                        }
                        editor.cursormarker.addCursor = function() {
                            // add to this cursors

                            // trigger redraw
                            editor.cursormarker.redraw()
                        }
                        editor.cursormarker.session = editor.session;
                        editor.cursormarker.session.addDynamicMarker(editor.cursormarker, true)

                        editor.gotoLine(1);
                        editor.onWsPublish=function(data,from,ws){
                            console.log(data,from,ws);
                            if (typeof(data.message.changeCursor)!='undefined') {
                                editor.cursormarker.cursors[from]=data.message.changeCursor;
                                editor.cursormarker.redraw();
                            }else if (typeof(data.message.changeSelection)!='undefined') {
                                console.log('changeSelection...');
                                if (typeof(editor.selectionsmarker[from])!='undefined'){
                                    editor.session.removeMarker(editor.selectionsmarker[from]);
                                }
                                editor.selectionsmarker[from]=editor.session.addMarker(new Range(
                                        data.message.changeSelection.start.row,
                                        data.message.changeSelection.start.column,
                                        data.message.changeSelection.end.row,
                                        data.message.changeSelection.end.column
                                ),"xxam_coding_selection n"+Object.keys(editor.selectionsmarker).length,true);

                            }else if (typeof(data.message.change)!='undefined'){
                                editor.broadcastchanges=false;
                                switch(data.message.change.action){
                                    case 'remove':
                                        //[16,{"topic":"com.xxam.coding.fd494bf1adcb177ae7292282622c7694","message":{"change":{"start":{"row":24,"column":0},"end":{"row":30,"column":5},"action":"remove","lines":["$kernel = new AppKernel('dev', true);","$kernel->loadClassCache();","$request = Request::createFromGlobals();","$response = $kernel->handle($request);","$response->send();","$kernel->terminate($request, $response);","<?php"]}},"receivers":[]}]

                                        editor.session.remove(new Range(
                                                data.message.change.start.row,
                                                data.message.change.start.column,
                                                data.message.change.end.row,
                                                data.message.change.end.column
                                        ));

                                        break;
                                    case 'insert':
                                        //[16,{"topic":"com.xxam.coding.fd494bf1adcb177ae7292282622c7694","message":{"change":{"start":{"row":24,"column":0},"end":{"row":24,"column":1},"action":"insert","lines":["a"]}},"receivers":[]}]
                                        editor.session.insert(data.message.change.start,data.message.change.lines.join("\n"))
                                        break;
                                }
                                editor.broadcastchanges=true;
                            }

                        }
                        editor.onWsSubscribedbroadcast=function(value,ws){
                            console.log('onWsSubscribedbroadcast',value);
                        }

                        
                    },
                    failure: function() {
                        console.log('failure');
                        
                    }
                });
            }
        }
       
        return {
            layout: 'border',
            items: [{
                region: 'west',
                title: ' ',
                //width: 300,
                split: true,
                collapsible: true,
                minSize: 75,
                maxSize: 450,
                layout: 'vbox',
                margins: '0 2 2 2',
                autoScroll: true,
                items: []
            },{
                region: 'center',
                layout: 'fit',
                margins: '2 2 0 0',
                dockedItems: [{
                    xtype: 'toolbar',
                    dock: 'top',
                    items: []
                }],
                items: [],
                id: 'aceeditor_{{id}}',
                listeners:{
                    render: function(ele){
                        waitforace();
                        
                        
                    }
                }
            }],
            listeners:{

                beforedestroy: function(){
                    console.log('close');
                    editor_{{id}}.container.remove();
                    delete editor_{{id}};
                }
            }
        }
    }
}