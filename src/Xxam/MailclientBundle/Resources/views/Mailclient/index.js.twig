{% set id = '' %}
{% set iconsize = '16x16' %}
{% set buttonsize = 'medium' %}
{% if buttonsize == 'large' %}
    {% set iconsize = '32x32' %}
{% endif %}
{
    tabtitle: 'Mails',
    tabicon: '/bundles/xxammailclient/icons/16x16/email.png',
    getitems: function (){
        Xxam.appendHead({
            css: ['/bundles/xxammailclient/css/layout.css']
        });
        if (typeof(EmaillistModel)=='undefined'){
            Ext.define('EmaillistModel',{
                extend: 'Ext.data.Model',
                fields: [
                    {name: 'subject', type: 'string'},
                    {name: 'from', type: 'string'},
                    {name: 'to', type: 'string'},
                    {name: 'date', type: 'string'},
                    {name: 'message_id', type: 'string'},
                    {name: 'size', type: 'int'},
                    {name: 'uid', type: 'int', unique: true, convert: null},
                    {name: 'msgno', type: 'int'},
                    {name: 'recent', type: 'boolean'},
                    {name: 'flagged', type: 'boolean'},
                    {name: 'answered', type: 'boolean'},
                    {name: 'deleted', type: 'boolean'},
                    {name: 'seen', type: 'boolean'},
                    {name: 'draft', type: 'boolean'},
                    {name: 'udate', type: 'int'},
                    {name: 'hasattachment', type: 'boolean'}
                ],
                idProperty: 'uid'
            });
        }
        lastmailboxinfo=false;
        
        var mailclient_maillist_store=Ext.create('Ext.data.Store', {
            model: 'EmaillistModel',
            remoteSort: true,
            //leadingBufferZone: 300,
            pageSize: 100,
            listeners:{
                load: function(store, records, successful, operation, node, eOpts ){
                    console.log('check');
                    Ext.Array.each(records,function(record,index){
                        if(record.data.recent==1){
                            if (!windowhasfocus){
                                notify('{% trans %}New mail from{% endtrans %} '+record.data.from, Ext.String.htmlEncode(record.data.subject), '/bundles/xxammailclient/icons/32x32/email.png')
                            }
                            Xxam.msg('{% trans %}New mail from{% endtrans %} '+record.data.from, Ext.String.htmlEncode(record.data.subject), '/bundles/xxammailclient/icons/32x32/email.png');
                        }
                    });
                }
            },


            proxy:{
                type: 'ajax',
                url: '{{path('mailclient_listmails')}}',
                reader : {
                    type: 'json',
                    rootProperty: 'mails',
                    totalProperty: 'totalCount'
                },
                // sends single sort as multi parameter
                simpleSortMode: true,
                // sends single group as multi parameter
                //simpleGroupMode: true,

                // This particular service cannot sort on more than one field, so grouping === sorting.
                //groupParam: 'sort',
                //groupDirectionParam: 'dir'


            },
            autoLoad: false
        });
        
        var mailclient_maillist_pagingtoolbar=Ext.create('Ext.PagingToolbar', {
            store: mailclient_maillist_store,
            displayInfo: true,
            displayMsg: 'Displaying Mails {0} - {1} of {2}',
            emptyMsg: "No mails to display"

        });
        
        getthumbnailurl=function(filename,filepath){
            var fileextensiontomimetype={{fileextensiontomimetype|jscode}};
            var fileextensionswiththumbnails={{fileextensionswiththumbnails|jscode}}
            var filenamesplit=filename.split('.');
            
            var filetype=filenamesplit[filenamesplit.length-1].toLowerCase();
            if (Ext.Array.indexOf(fileextensionswiththumbnails,filetype)>-1){
                return "{{path('xxam_core_homepage')}}thumbnails/crop/64x64"+filepath;
            }
            if (typeof fileextensiontomimetype[filetype] != 'undefined'){
                return "/bundles/xxamcore/icons/64x64/mimetypes/"+fileextensiontomimetype[filetype];
            }
            return "/bundles/xxamcore/icons/64x64/mimetypes/unknown.png";

        };
        
        return {
            tbar: [
                { 
                    xtype: 'button', 
                    text: '{%trans%}Refresh{%endtrans%}', 
                    tooltip: '{%trans%}Check for new messages{%endtrans%}', 
                    scale: '{{buttonsize}}', 
                    icon: '/bundles/xxammailclient/icons/{{iconsize}}/arrow_refresh.png',
                    handler: function(){
                        Ext.getCmp('mailclient_maillist').store.load();
                    }
                },
                { 
                    xtype: 'button', 
                    text: '{%trans%}New{%endtrans%}', 
                    tooltip: '{%trans%}Create new message{%endtrans%}', 
                    scale: '{{buttonsize}}', 
                    icon: '/bundles/xxammailclient/icons/{{iconsize}}/email_edit.png',
                    handler: function(){
                        window.location.href='#mailclient/write';
                    }
                },
                { xtype: 'tbfill'},
                { xtype: 'button', text: '{%trans%}Settings{%endtrans%}', tooltip: '{%trans%}Settings{%endtrans%}', scale: '{{buttonsize}}', icon: '/bundles/xxammailclient/icons/{{iconsize}}/email_setting.png',
                    handler: function(){
                        window.location.href='#mailclient/settings';
                    }
                }

            ],
            listeners:{
                 added: function(tab, container, pos ){
                    if (typeof mailclient_maillisttimeout == 'undefined'){
                        mailclient_maillisttimeoutfunction=function(){ 
                            //if (!windowhasfocus){ //Ext.getCmp('mailclient_maillist').store.load(); 
                            
                                Ext.Ajax.request({
                                    url: 'mailclient/getmailboxinfo?path='+Ext.getCmp('mailclient_folderlist').getSelection()[0].data.path,

                                    success: function(response){
                                        var responsejson=Ext.JSON.decode(response.responseText);
                                        rrr=responsejson;
                                        if (lastmailboxinfo == false || Ext.JSON.encode(lastmailboxinfo)!=Ext.JSON.encode(responsejson.mailboxinfo)){
                                            //something has changed, reload...
                                            console.log(Ext.JSON.encode(lastmailboxinfo)==Ext.JSON.encode(responsejson.mailboxinfo));
                                            lastmailboxinfo=responsejson.mailboxinfo;
                                            scrollpos=Ext.getCmp('mailclient_maillist').view.getScrollY();
                                            Ext.getCmp('mailclient_maillist').getStore().load({
                                                callback: function(records, operation, success) {
                                                    Ext.getCmp('mailclient_maillist').view.scrollTo(0,scrollpos);
                                                }
                                            });
                                        }

                                    }

                                });
                           // }
                            
                            
                            mailclient_maillisttimeout=setTimeout(mailclient_maillisttimeoutfunction, 10000);
                        }
                        mailclient_maillisttimeout=setTimeout(mailclient_maillisttimeoutfunction, 10000);
                    }
                 },
                 removed: function(tab, container, pos ){
                    if (typeof mailclient_maillisttimeout != 'undefined'){
                        clearTimeout(mailclient_maillisttimeout);
                        delete mailclient_maillisttimeout;
                    }
                 }

            },
            layout: 'border',
            items: [{
                region: 'west',
                title: 'Folders',
                width: 300,
                split: true,
                collapsible: true,
                minSize: 75,
                maxSize: 450,
                layout: 'vbox',
                margins: '0 2 2 2',
                autoScroll: true,
                items: [ 
                    {
                        xtype: 'treepanel',
                        rootVisible: false,
                        id: 'mailclient_folderlist',
                        width: '100%',
                        layout: 'hbox',
                        border: 0,
                        margins: '4 4 5 5',

                        viewConfig: {
                            renderer: function(value,metaData,record){
                                return value;
                            },
                            copy: false,
                            plugins: [
                                {
                                    ptype: 'treeviewdragdrop',
                                    appendOnly: true,
                                    allowParentInsert: true,
                                    ddGroup: 'mailDD'


                                }
                            ],
                            listeners: {

                                beforedrop: function(node, data, overModel, dropPosition, dropHandlers){
                                    if (data.view.xtype=='tableview'){ //move mail into folder:
                                        dropHandlers.wait = true;
                                        console.log('move mail into folder');
                                        var ids=[];
                                        Ext.Array.each(data.records, function(record){
                                            ids.push(record.id);
                                        });
                                        var from=data.view.getStore().getProxy().extraParams.path.toString();
                                        var to=overModel.raw.path;
                                        Ext.Ajax.request({
                                            url: 'mailclient/movemails?from='+from+'&to='+to+'&ids='+ids,

                                            success: function(response){
                                                var responsejson=Ext.JSON.decode(response.responseText);
                                                scrollpos=Ext.getCmp('mailclient_maillist').view.getScrollY();
                                                Ext.getCmp('mailclient_maillist').getStore().load({
                                                    callback: function(records, operation, success) {
                                                        console.log('lalala',scrollpos);
                                                        Ext.getCmp('mailclient_maillist').view.scrollTo(0,scrollpos);
                                                    }
                                                });

                                            }

                                        });
                                        dropHandlers.cancelDrop();
                                        return false;
                                    }else{
                                        dropHandlers.wait = true;

                                        console.log('tree beforedrop',node, data, overModel, dropPosition, dropHandlers);
                                        Ext.MessageBox.confirm('Drop', 'Are you sure', function(btn){
                                            if (btn === 'yes') {
                                                dropHandlers.processDrop();
                                            } else {
                                                dropHandlers.cancelDrop();
                                            }
                                        });
                                    }

                                    //return true;
                                },
                                drop: function(node, data, overModel, dropPosition) {
                                    console.log('tree drop');
                                    return false;
                                    console.log('tree drop',node, data, overModel, dropPosition);
                                }
                            }
                        },
                        store: {
                            extend: 'Ext.data.TreeStore',
                            model: {
                                extend: 'Ext.data.Model',
                                fields: [
                                    {name: 'text', type: 'string'},
                                    {name: 'path', type: 'string'},
                                    {name: 'leaf', type: 'boolean'}
                                ]
                            },

                            proxy:{
                                type: 'ajax',
                                url: '{{path('mailclient_listfolders')}}',
                                reader : {
                                    type: 'json'
                                }
                            },
                            autoLoad: true
                        },
                        listeners: {
                            load: function(store, records, successful, operation, node, eOpts ){
                                if (store.ownerTree.getSelection().length==0){
                                    store.ownerTree.getSelectionModel().select(0);
                                }
                            },
                            selectionchange: function(model, selected, eOpts){
                                var grid=model.view.findParentByType('panel').findParentByType('panel').findParentByType('panel').layout.centerRegion.items.items[0];
                                grid.store.getProxy().setExtraParam('path',selected[0].data.path);
                                mailclient_maillist_pagingtoolbar.moveFirst();
                                //grid.store.load();
                                Ext.getCmp('mailclient_mailpanel{{id}}').collapse();
                                Ext.getCmp('mailclient_mailpanel{{id}}').setTitle('');
                                /*grid.store.load({
                                    params:{
                                        path: selected[0].data.path
                                    }
                                });*/
                            },
                            beforeiteminsert : function(obj, node) {
                                console.log('beforeinteminsert',obj,node);   
                           }

                        },/*,
                        folderSort: true,
                        sorters: [{
                            property: 'name',
                            direction: 'ASC'
                        }]*/
                    }
                ]
            }, {
                region: 'center',
                layout: 'border',
                margins: '2 2 0 0',
                //autoScroll: true,
                //split: true,
                items: [{
                    xtype: 'gridpanel',
                    region: 'center',
                    layout: 'fit',
                    id: 'mailclient_maillist',
                    stateful: true,
                    stateId: 'mailclient_maillist',
                    //stateEvents: ['columnschanged'],
                    minHeight: 60,
                    minSize: 60,
                    weight: 1,
                    split: true,
                    loadMask: true,
                    selModel: {
                        pruneRemoved: false
                    },
                    multiSelect: true,
                    viewConfig: {
                        trackOver: false
                    },
                    /*features: [{
                        ftype: 'grouping',
                        hideGroupedHeader: false
                    }],*/
                    plugins: 'gridfilters',
                    viewConfig: {
                        plugins: {
                            ptype: 'gridviewdragdrop',
                            dragText: 'Drag and drop to reorganize',
                            dragGroup: 'mailDD'
                        }
                    },
                    store: mailclient_maillist_store,
                    // paging bar on the bottom
                    bbar: mailclient_maillist_pagingtoolbar,
                    columns: [
                        { 
                            text: 'Subject',  
                            dataIndex: 'subject', 
                            stateId: 'mailclient_maillist_subject',
                            stateful: true,
                            flex: 1, 
                            cellWrap: true, 
                            filter: {type: 'string'},
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            } 
                        },
                        { 
                            text: 'From', 
                            dataIndex: 'from', 
                            stateId: 'mailclient_maillist_from',
                            stateful: true, 
                            filter: {type: 'string'},
                            renderer: function(value, metaData, record) {
                                var from=Ext.String.trim(value.split('<')[0]).replace(/"/g,'');
                                if(from=='') from = value;
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(from);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(from));
                                }
                            } 
                        },
                        { 
                            text: 'To', 
                            dataIndex: 'to', 
                            stateId: 'mailclient_maillist_to',
                            stateful: true, 
                            hidden: true, 
                            filter: {type: 'string'},
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            } 
                        },
                        { 
                            text: 'Date', 
                            dataIndex: 'date', 
                            stateId: 'mailclient_maillist_date',
                            stateful: true, 
                            filter: {type: 'date'},
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            } 
                        },
                        { 
                            text: 'Message Id', 
                            dataIndex: 'message_id', 
                            stateId: 'mailclient_maillist_message_id',
                            stateful: true, 
                            hidden: true,
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            }  
                        },
                        { 
                            text: 'References', 
                            dataIndex: 'references', 
                            stateId: 'mailclient_maillist_references',
                            stateful: true, 
                            hidden: true,
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            }  
                        },
                        { 
                            text: 'In reply to', 
                            dataIndex: 'in_reply_to', 
                            stateId: 'mailclient_maillist_in_reply_to',
                            stateful: true, 
                            hidden: true,
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            }  
                        },
                        { 
                            text: 'Size', 
                            dataIndex: 'size', 
                            stateId: 'mailclient_maillist_size',
                            stateful: true,
                            align: 'right',
                            renderer: function(value, metaData, record) {
                                var valuestring;
                                if(value > 0){
                                    var s = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
                                    var e = Math.floor(Math.log(value)/Math.log(1024));
                                    valuestring= (value/Math.pow(1024, Math.floor(e))).toFixed(2)+" "+s[e];
                                }
                                else{
                                    valuestring= '0 ' + 'bytes';
                                }
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(valuestring);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(valuestring));
                                }
                            }  
                        },
                        { 
                            text: 'Uid', 
                            dataIndex: 'uid', 
                            stateId: 'mailclient_maillist_uid',
                            stateful: true, 
                            hidden: true,
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            }  
                        },
                        { 
                            text: 'Msgno', 
                            dataIndex: 'msgno', 
                            stateId: 'mailclient_maillist_msgno',
                            stateful: true, 
                            hidden: true,
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            }  
                        },
                        { 
                            text: 'Recent', 
                            dataIndex: 'recent', 
                            stateId: 'mailclient_maillist_recent',
                            stateful: true, 
                            hidden: true, 
                            filter: {type: 'boolean'},
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            }  
                        },
                        { 
                            text: 'Flagged', 
                            dataIndex: 'flagged', 
                            stateId: 'mailclient_maillist_flagged',
                            stateful: true, 
                            hidden: true, 
                            filter: {type: 'boolean'},
                            renderer: function(value, metaData, record) {
                                if(value==true){
                                    return '<img title="{% trans %}Flagged{% endtrans %}" alt="{% trans %}Flagged{% endtrans %}" src="/bundles/xxammailclient/icons/16x16/star.png" />';
                                }else{
                                    return ' ';
                                }
                            }  
                        },
                        { 
                            text: 'Answered', 
                            dataIndex: 'answered', 
                            stateId: 'mailclient_maillist_answered',
                            stateful: true, 
                            hidden: true, 
                            filter: {type: 'boolean'},
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            } 
                        },
                        { 
                            text: 'Deleted', 
                            dataIndex: 'deleted', 
                            stateId: 'mailclient_maillist_deleted',
                            stateful: true, 
                            hidden: true, 
                            filter: {type: 'boolean'},
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            }  
                        },
                        { 
                            text: 'Seen', 
                            dataIndex: 'seen', 
                            stateId: 'mailclient_maillist_seen',
                            stateful: true, 
                            hidden: true, 
                            filter: {type: 'boolean'},
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            }  
                        },
                        { 
                            text: 'Draft', 
                            dataIndex: 'draft', 
                            stateId: 'mailclient_maillist_draft',
                            stateful: true, 
                            hidden: true,
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            }  
                        },
                        { 
                            //text: 'Attachments', 
                            header: '<img class="header-icon" src="/bundles/xxammailclient/icons/16x16/attach.png" />',
                            
                            dataIndex: 'hasattachment', 
                            stateId: 'mailclient_maillist_hasattachment',
                            stateful: true, 
                            hidden: false, 
                            filter: {type: 'boolean'},
                            renderer: function(value, metaData, record) {
                                if(value==true){
                                    return '<img title="{% trans %}Attachment{% endtrans %}" alt="{% trans %}Attachment{% endtrans %}" src="/bundles/xxammailclient/icons/16x16/attach.png" />';
                                }else{
                                    return ' ';
                                }
                            }  
                        },
                        { 
                            text: 'Udate', 
                            dataIndex: 'udate', 
                            stateId: 'mailclient_maillist_udate',
                            stateful: true, 
                            hidden: true,
                            renderer: function(value, metaData, record) {
                                if(record.data.seen==true){
                                    return Ext.String.htmlEncode(value);
                                }else{
                                    return Ext.String.format('<strong>{0}</strong>', Ext.String.htmlEncode(value));
                                }
                            }  
                        }
                    ],
                    
                    listeners:{
                        itemkeydown: function(grid, record, tr, rowindex, event){
                            eee=event;
                            if(event.keyCode==event.DELETE || event.keyCode==event.BACKSPACE){
                                //delete:
                                ggg=grid;
                                selected=grid.selectionModel.selected.items;
                                selectedids=[];
                                Ext.Array.each(selected,function(item){
                                    selectedids.push(item.id);
                                });
                                console.log('delete',selectedids);
                                var from=grid.getStore().getProxy().extraParams.path.toString();
                                Ext.Ajax.request({
                                    url: 'mailclient/trashmails?from='+from+'&ids='+selectedids.join(','),
                                    success: function(response){
                                        var responsejson=Ext.JSON.decode(response.responseText);
                                        scrollpos=Ext.getCmp('mailclient_maillist').view.getScrollY();
                                        Ext.getCmp('mailclient_maillist').getStore().load({
                                            callback: function(records, operation, success) {
                                                console.log('lalala',scrollpos);
                                                Ext.getCmp('mailclient_maillist').view.scrollTo(0,scrollpos);
                                            }
                                        });

                                    }

                                });
                            }
                        },
                        rowcontextmenu: function(grid, index, tr, rowindex, event) {
                            event.stopEvent();
                            var record = grid.getStore().getAt(index);
                            var menu = new Ext.menu.Menu({
                                items: [
                                { text: '{%trans%}Reply{%endtrans%}', tooltip: '{%trans%}Reply to sender{%endtrans%}', scale: '{{buttonsize}}', icon: '/bundles/xxammailclient/icons/16x16/outlook_reply.png' },
                                { text: '{%trans%}Reply all{%endtrans%}', tooltip: '{%trans%}Reply to list or to sender and all recipients{%endtrans%}', scale: '{{buttonsize}}', icon: '/bundles/xxammailclient/icons/16x16/outlook_reply_all.png',
                                    menu: [
                                        { text: '{%trans%}Reply all{%endtrans%}' },
                                        { text: '{%trans%}Reply list{%endtrans%}' }
                                    ]
                                },
                                { text: '{%trans%}Forward{%endtrans%}', tooltip: '{%trans%}Forward{%endtrans%}', scale: '{{buttonsize}}', icon: '/bundles/xxammailclient/icons/16x16/email_forward.png' },
                                { 
                                    text: '{%trans%}Trash{%endtrans%}', 
                                    tooltip: '{%trans%}Move message to trash{%endtrans%}', 
                                    scale: '{{buttonsize}}', 
                                    icon: '/bundles/xxammailclient/icons/16x16/outlook_delete_all.png',
                                    handler: function(){

                                        selected=Ext.getCmp('mailclient_maillist').selModel.selected.items;
                                        selectedids=[];
                                        Ext.Array.each(selected,function(item){
                                            selectedids.push(item.id);
                                        });

                                        var from=Ext.getCmp('mailclient_maillist').getStore().getProxy().extraParams.path.toString();
                                        Ext.Ajax.request({
                                            url: 'mailclient/trashmails?from='+from+'&ids='+selectedids.join(','),
                                            success: function(response){
                                                var responsejson=Ext.JSON.decode(response.responseText);
                                                scrollpos=Ext.getCmp('mailclient_maillist').view.getScrollY();
                                                Ext.getCmp('mailclient_maillist').getStore().load({
                                                    callback: function(records, operation, success) {
                                                        Ext.getCmp('mailclient_maillist').view.scrollTo(0,scrollpos);
                                                    }
                                                });

                                            }

                                        });
                                    }
                                },
                                { 
                                    text: '{%trans%}Junk{%endtrans%}', 
                                    tooltip: '{%trans%}Mark as junk{%endtrans%}', 
                                    scale: '{{buttonsize}}', 
                                    icon: '/bundles/xxammailclient/icons/16x16/spam_assassin.png',
                                    handler: function(){

                                        selected=Ext.getCmp('mailclient_maillist').selModel.selected.items;
                                        selectedids=[];
                                        Ext.Array.each(selected,function(item){
                                            selectedids.push(item.id);
                                        });

                                        var from=Ext.getCmp('mailclient_maillist').getStore().getProxy().extraParams.path.toString();
                                        Ext.Ajax.request({
                                            url: 'mailclient/junkmails?from='+from+'&ids='+selectedids.join(','),
                                            success: function(response){
                                                var responsejson=Ext.JSON.decode(response.responseText);
                                                scrollpos=Ext.getCmp('mailclient_maillist').view.getScrollY();
                                                Ext.getCmp('mailclient_maillist').getStore().load({
                                                    callback: function(records, operation, success) {
                                                        Ext.getCmp('mailclient_maillist').view.scrollTo(0,scrollpos);
                                                    }
                                                });

                                            }

                                        });
                                    } 
                                },
                                { text: '{%trans%}Mark{%endtrans%}', tooltip: '{%trans%}Mark message{%endtrans%}', scale: '{{buttonsize}}', icon: '/bundles/xxammailclient/icons/16x16/publisher_bookmark.png',
                                    menu: [
                                        { 
                                            text: '{%trans%}As read{%endtrans%}',
                                            handler: function(){

                                                selected=Ext.getCmp('mailclient_maillist').selModel.selected.items;
                                                selectedids=[];
                                                Ext.Array.each(selected,function(item){
                                                    selectedids.push(item.id);
                                                });

                                                var from=Ext.getCmp('mailclient_maillist').getStore().getProxy().extraParams.path.toString();
                                                Ext.Ajax.request({
                                                    url: 'mailclient/markmailsasread?from='+from+'&ids='+selectedids.join(','),
                                                    success: function(response){
                                                        var responsejson=Ext.JSON.decode(response.responseText);
                                                        scrollpos=Ext.getCmp('mailclient_maillist').view.getScrollY();
                                                        Ext.getCmp('mailclient_maillist').getStore().load({
                                                            callback: function(records, operation, success) {
                                                                Ext.getCmp('mailclient_maillist').view.scrollTo(0,scrollpos);
                                                            }
                                                        });

                                                    }

                                                });
                                            } 
                                        },
                                        { 
                                            text: '{%trans%}As unread{%endtrans%}',
                                            handler: function(){

                                                selected=Ext.getCmp('mailclient_maillist').selModel.selected.items;
                                                selectedids=[];
                                                Ext.Array.each(selected,function(item){
                                                    selectedids.push(item.id);
                                                });

                                                var from=Ext.getCmp('mailclient_maillist').getStore().getProxy().extraParams.path.toString();
                                                Ext.Ajax.request({
                                                    url: 'mailclient/markmailsasunread?from='+from+'&ids='+selectedids.join(','),
                                                    success: function(response){
                                                        var responsejson=Ext.JSON.decode(response.responseText);
                                                        scrollpos=Ext.getCmp('mailclient_maillist').view.getScrollY();
                                                        Ext.getCmp('mailclient_maillist').getStore().load({
                                                            callback: function(records, operation, success) {
                                                                Ext.getCmp('mailclient_maillist').view.scrollTo(0,scrollpos);
                                                            }
                                                        });

                                                    }

                                                });
                                            } 
                                        },
                                        { 
                                            text: '{%trans%}As flagged{%endtrans%}',
                                            handler: function(){

                                                selected=Ext.getCmp('mailclient_maillist').selModel.selected.items;
                                                selectedids=[];
                                                Ext.Array.each(selected,function(item){
                                                    selectedids.push(item.id);
                                                });

                                                var from=Ext.getCmp('mailclient_maillist').getStore().getProxy().extraParams.path.toString();
                                                Ext.Ajax.request({
                                                    url: 'mailclient/markmailsasflagged?from='+from+'&ids='+selectedids.join(','),
                                                    success: function(response){
                                                        var responsejson=Ext.JSON.decode(response.responseText);
                                                        scrollpos=Ext.getCmp('mailclient_maillist').view.getScrollY();
                                                        Ext.getCmp('mailclient_maillist').getStore().load({
                                                            callback: function(records, operation, success) {
                                                                Ext.getCmp('mailclient_maillist').view.scrollTo(0,scrollpos);
                                                            }
                                                        });

                                                    }

                                                });
                                            } 
                                        },
                                        { 
                                            text: '{%trans%}As unflagged{%endtrans%}',
                                            handler: function(){

                                                selected=Ext.getCmp('mailclient_maillist').selModel.selected.items;
                                                selectedids=[];
                                                Ext.Array.each(selected,function(item){
                                                    selectedids.push(item.id);
                                                });

                                                var from=Ext.getCmp('mailclient_maillist').getStore().getProxy().extraParams.path.toString();
                                                Ext.Ajax.request({
                                                    url: 'mailclient/markmailsasunflagged?from='+from+'&ids='+selectedids.join(','),
                                                    success: function(response){
                                                        var responsejson=Ext.JSON.decode(response.responseText);
                                                        scrollpos=Ext.getCmp('mailclient_maillist').view.getScrollY();
                                                        Ext.getCmp('mailclient_maillist').getStore().load({
                                                            callback: function(records, operation, success) {
                                                                Ext.getCmp('mailclient_maillist').view.scrollTo(0,scrollpos);
                                                            }
                                                        });

                                                    }

                                                });
                                            } 
                                        }
                                    ] 
                                }]
                            }).showAt(event.getXY());
                        },
                        selectionchange: function(model, selected, eOpts){
                            if (selected.length==1){
                                var path=model.getStore().getProxy().extraParams.path.toString();
                                var mailaccountid=path.split('.')[0];
                                console.log(mailaccountid);
                                var mailid=selected[0].id;
                                Ext.Ajax.request({
                                    url: 'mailclient/getmail?path='+path+'&mailid='+mailid,
                                    success: function(response){
                                        var responsejson=Ext.JSON.decode(response.responseText);
                                        var headerhtml=[];
                                        //var headerhtmlsmall=[];
                                        var mailtitle='';
                                        //subject
                                        if(typeof responsejson.subject != 'undefined'){
                                            mailtitle=Ext.String.htmlEncode(responsejson.subject)+' ';
                                        }
                                        //from
                                        var fromtext='';
                                        if(typeof responsejson.fromName != 'undefined'){
                                            fromtext=responsejson.fromName;
                                            mailtitle+='<span class="mailtitlefrom">('+Ext.String.htmlEncode(responsejson.fromName);
                                        }else{
                                            mailtitle+='<span class="mailtitlefrom">('+Ext.String.htmlEncode(responsejson.fromAddress);
                                        }
                                        if(typeof responsejson.fromAddress != 'undefined') fromtext+='<'+responsejson.fromAddress+'>';
                                        if(fromtext != '') {
                                            headerhtml.push('<tr><th>{% trans %}From{% endtrans %}</th><td>'+Ext.String.htmlEncode(fromtext)+'</td></tr>');
                                        }
                                        //to
                                        if(typeof responsejson.toString != 'undefined'){
                                            headerhtml.push('<tr><th>{% trans %}To{% endtrans %}</th><td>'+Ext.String.htmlEncode(responsejson.toString)+'</td></tr>');
                                        }
                                        //replyto
                                        var replytotext='';
                                        if(typeof responsejson.replyTo != 'undefined'){
                                            Ext.Object.each(responsejson.replyTo, function(key,value){
                                                if (value!=null) replytotext+=value+ ' ';
                                                replytotext+='<'+key+'>';
                                            });
                                        }
                                        if (replytotext!='')headerhtml.push('<tr><th>{% trans %}Reply to{% endtrans %}</th><td>'+Ext.String.htmlEncode(replytotext)+'</td></tr>');
                                        //date
                                        if(typeof responsejson.date != 'date'){
                                            headerhtml.push('<tr><th>{% trans %}Date{% endtrans %}</th><td>'+Ext.String.htmlEncode(responsejson.date)+'</td></tr>');
                                            mailtitle+=' '+Ext.String.htmlEncode(responsejson.date)+')</span>';
                                        }
                                        //prio
                                        //if(typeof responsejson.subject != 'undefined') headerhtml.push('<tr><th>{% trans %}Priority{% endtrans %}</th><td>'+Ext.String.htmlEncode(responsejson.subject)+'</td></tr>');
                                        Ext.getCmp('mailclient_mailpanel{{id}}').setTitle(mailtitle);
                                        Ext.getCmp('mailclient_mailpanel{{id}}').getComponent('mailpanelheader').setHtml('<table class="mailpanelheader">'+headerhtml.join('')+'</table>'); 

                                        if(responsejson.hasexternallinks) Ext.getCmp('mailclient_mailpanel{{id}}').getComponent('mailpanelheader').setHtml(Ext.getCmp('mailclient_mailpanel{{id}}').getComponent('mailpanelheader').html+'<div class="mailpanelheadernotice"><div>{% trans %}To protect your privacy, remote images are blocked in this message.{% endtrans %} <a href="#" onclick="return displayimages('+mailid+',this);">{% trans %}Display images{% endtrans %}</a></div></div>');
                                        displayimages=function(mailid,ele){
                                            Ext.get(Ext.getCmp('mailclient_mailpanel{{id}}').body.dom.querySelector('.mailpanelheadernotice')).destroy();
                                            Ext.getCmp('mailclient_mailpanelbody{{id}}').load('mailclient/getmailcontent?path='+Ext.getCmp('mailclient_folderlist').getSelection()[0].data.path+'&externalsources=1&mailid='+mailid);
                                            Ext.getCmp('mailclient_mailpanel{{id}}').doLayout();
                                            return false;
                                        }
                                        if(Ext.getCmp('mailclient_minimizeheaderbutton{{id}}').pressed){
                                            Ext.get(Ext.getCmp('mailclient_mailpanel{{id}}').body.dom.querySelector('.mailpanelheader')).setVisibilityMode(Ext.Element.DISPLAY).hide();
                                        }else{
                                            Ext.get(Ext.getCmp('mailclient_mailpanel{{id}}').body.dom.querySelector('.mailpanelheader')).show();
                                        }
                                        //attachments:
                                        if(typeof responsejson.files != 'undefined'){
                                            var storedata=[];
                                            Ext.Array.each(responsejson.files, function(file){
                                                file.thumbnail=getthumbnailurl(file.name,file.filepath);
                                                storedata.push(file);


                                            });
                                            Ext.getCmp('mailclient_mailpanelattachments{{id}}').store.setData(storedata);
                                            Ext.getCmp('mailclient_mailpanelattachments{{id}}').up('panel').expand();
                                        }
                                        
                                        
                                        Ext.getCmp('mailclient_mailpanel{{id}}').setCollapsed(false);
                                        Ext.getCmp('mailclient_mailpanel{{id}}').getComponent('mailpanelheader').updateLayout();
                                        Ext.getCmp('mailclient_mailpanelbody{{id}}').load('mailclient/getmailcontent?path='+Ext.getCmp('mailclient_folderlist').getSelection()[0].data.path+'&mailid='+mailid);
                                            
                                        //refresh row:
                                        Ext.getCmp('mailclient_maillist').selection.data.seen=true;
                                        Ext.getCmp('mailclient_maillist').getView().refresh();
                                    }
                                });
                            }
                        }
                    }
                },{
                    region: 'south',
                    id: 'mailclient_mailpanel{{id}}',
                    collapsible: true,
                    collapsed: true,
                    stateful: true,
                    stateEvents: ["resize"],
                    getState: function() {
                        return { height: this.height };
                    },
                    
                    split: true,
                    //minSize: 200,
                    //maxSize: 450,
                    //minHeight: 200,
                    height: 200,
                    weight: 1,
                    layout: 'border',
                    //layout: 'fit',
                    items:[
                        {{ include('Xxam\MailclientBundle:Mailclient:mailpanelitems.js.twig', { 'id': id }) }}
                    ]
                }]
            }]
        }
    }
}