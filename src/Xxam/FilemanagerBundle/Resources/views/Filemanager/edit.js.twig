{% set iconsize = '16x16' %}
{% set buttonsize = 'medium' %}
{% if buttonsize == 'large' %}
    {% set iconsize = '32x32' %}
{% endif %}
{
    tabtitle: '{% if entity.id %}{% trans with {'%filesystemname%': entity.filesystemname} %}Edit %filesystemname%{% endtrans %}{% else %}{% trans %}Create new filesystem{% endtrans %}{% endif %}',
    iconCls: 'x-fa fa-database',
    getitems: function(){
        Xxam.appendHead({
            css: ['/bundles/xxamfilemanager/css/layout.css']
        });
        if (typeof(FilemanagerModel)=='undefined'){
          Ext.define('FilemanagerModel',{
             extend: 'Ext.data.Model',
             fields: {{modelfields|jsonwithfunctions()}},
             idProperty: 'id',
             proxy: {
                type: 'rest',
                url : '{{path('post_filemanager')}}',
                writer: {
                    type: "json",
                    writeAllFields: true
                }
            }
          });
        }


        var filesystemadapters={{filesystemadapters|jscode()}};
        var filesystemadaptersdata=[];
        Ext.Object.each(filesystemadapters, function(key,value){
            filesystemadaptersdata.push({'id':key,'value':key});
        });

        var filesystemadaptersStore = Ext.create('Ext.data.Store', {
            fields: ['id', 'value'],
            data : filesystemadaptersdata
        });

        var entitysettings=Ext.JSON.decode('{{entity.settings}}',true);
    console.log(entitysettings);
        var generateField=function(filesystemadapterfield,name){
            var fieldconf={'name':name,'fieldLabel':formatLabel(name)};
            var field={};
            if (filesystemadapterfield.help) {
                if (filesystemadapterfield.type=='checkbox'){
                    fieldconf.boxLabel=filesystemadapterfield.help;
                }else {
                    fieldconf.afterBodyEl = '<span class="x-form-helptext">' + filesystemadapterfield.help + '</span>';
                }
            }
            switch(filesystemadapterfield.type){
                case 'text':
                    field=new Ext.form.TextField(fieldconf);
                    break;
                case 'password':
                    fieldconf.inputType='password';
                    field=new Ext.form.TextField(fieldconf);
                    break;
                case 'number':
                    fieldconf.inputType='number';
                    field=new Ext.form.TextField(fieldconf);
                    break;
                case 'checkbox':
                    //fieldconf.inputType='checkbox';
                    field=new Ext.form.field.Checkbox(fieldconf);
                    break;
                case 'select':
                    fieldconfdata=[];
                    Ext.Object.each(filesystemadapterfield.values,function(key,value){
                        fieldconfdata.push({value:key,name:value});
                    })
                    var valuesstore = Ext.create('Ext.data.Store', {
                        fields: ['value', 'name'],
                        data : fieldconfdata
                    });
                    fieldconf.store=valuesstore;
                    fieldconf.valueField= 'value';
                    fieldconf.displayField= 'name';
                    field=new Ext.form.field.ComboBox(fieldconf);
                    break;
            }
            if(entitysettings && typeof entitysettings[fieldconf.name]!='undefined'){

                field.setValue(entitysettings[fieldconf.name]);

            }
            return field;
        }
        var generateFields=function(filesystemadaptername){
            var adapterfields=filesystemadapters[filesystemadaptername];
            var formconfig=[];
            Ext.Object.each(adapterfields,function(key,value){
                formconfig.push(generateField(value,key));
            });
            return formconfig;
        }
        var formatLabel=function(fieldname){
            fieldnamearr=Ext.String.splitWords(fieldname.replace(/_/,' '));
            Ext.Array.each(fieldnamearr,function(name,index,fieldnamearr){
                fieldnamearr[index]=Ext.String.capitalize(name);
            });

            return fieldnamearr.join(' ');
        }
        
        return {
            xtype: 'form',
            layout: 'form',
            defaultType: 'textfield',
            scrollable: true,
            defaults: {
                labelWidth: 200,
                layout: 'fit',
                flex: 1
            },
            items: [{
                xtype: 'hiddenfield',
                name: 'id',
                value: '{{entity.id}}'
            },{
                xtype: 'textfield',
                name: 'filesystemname',
                fieldLabel: 'Name',
                value: '{{entity.filesystemname}}'
            },{
                xtype: 'combo',
                fieldLabel: 'Type',
                name: 'adapter',
                store: filesystemadaptersStore,
                queryMode: 'local',
                displayField: 'value',
                valueField: 'id',
                itemId: 'fieldAdapter',
                value: '{{entity.getAdapter()}}',
                listeners: {
                    'select': function(){
                        var fields=generateFields(this.getValue());
                        ttt=this;
                        console.log(fields);
                        fff=fields;
                        this.up().down('fieldcontainer').down('fieldset').removeAll();
                        for(var i=0; i<fields.length; i++){
                            this.up().down('fieldcontainer').down('fieldset').add(fields[i]);
                        }

                    }
                }
            },{
                xtype: 'fieldcontainer',
                fieldLabel: 'Settings',
                items: {
                    // Fieldset in Column 1 - collapsible via toggle button
                    xtype: 'fieldset',
                    border: false,
                    collapsible: false,
                    defaultType: 'textfield',
                    flex: 1,
                    layout: {
                        type: 'form'
                    },
                    defaults: {
                        labelWidth: 200,
                        layout: 'fit',
                        flex: 1
                    },
                    items: [{
                        fieldLabel: 'Field',
                        name: 'field'
                    }]
                }
            }],
            listeners: {
                'added': function() {
                    ttt = this;
                    var fields = generateFields(this.getComponent('fieldAdapter').getValue());
                    this.down('fieldset').removeAll();
                    for (var i = 0; i < fields.length; i++) {
                        this.down('fieldset').add(fields[i]);
                    }
                }
            },
            dockedItems: [{
                xtype: 'toolbar',
                dock: 'bottom',
                ui: 'footer',
                //defaults: {minWidth: minButtonWidth},
                items: [{% include "XxamCoreBundle:snippets:footerversionlog.js.twig" %}
                    { xtype: 'component', flex: 1 },
                    {
                        xtype: 'button',
                        text: '{%trans%}Save{%endtrans%}',

                        handler: function() {
                            // The getForm() method returns the Ext.form.Basic instance:
                            var form = this.up('form').getForm();
                            fff=form;
                            console.log(form);
                            if (form.isValid()) {
                                console.log(typeof(FilemanagerModel));
                                formvalues=form.getValues();
                                formsettings=form.getValues();
                                delete formsettings.id;
                                delete formsettings.adapter;

                                var newfilesystem=Ext.create('FilemanagerModel',{id:formvalues.id,filesystemname: formvalues.filesystemname, adapter:formvalues.adapter,settings:Ext.JSON.encode(formsettings)});
                                console.log(newfilesystem);

                                // Submit the Ajax request and handle the response
                                newfilesystem.save({
                                    scope: this.up('form'),
                                    success: function(filesystem) {
                                        ttt=this;
                                        this.up('panel').close();
                                        if (typeof Ext.getCmp('filemanager_filesystemlist') !='undefined'){
                                            Ext.getCmp('filemanager_filesystemlist').getStore().load({
                                                callback: function(records, operation, success) {
                                                    //Ext.getCmp('mailclient_maillist').view.scrollTo(0,scrollpos);
                                                }
                                            });
                                        }
                                       //Ext.Msg.alert('Success', action.result.message);
                                    },
                                    failure: function(filesystem, operation) {
                                        var error=Ext.JSON.decode(operation.error.response.responseText);
                                        if (error){
                                            if(error.errors && error.errors.form && error.errors.form.children){
                                                var errors=[];
                                                Ext.Object.each(error.errors.form.children,function(key,value){
                                                    errors.push({field:key,message:value.errors});
                                                });
                                                this.getForm().markInvalid(errors);
                                            }
                                        }
                                        //Ext.Msg.alert('Failed', action.result ? action.result.message : 'No response');
                                    }
                                });
                            }
                        }
                    }
                ]
            }]
        }

    }
}